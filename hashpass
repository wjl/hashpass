#!/usr/bin/python3

# Hashpass -- generate passwords on-the-fly
# Copyright © 2014 Wesley J. Landaker <wjl@icecavern.net>
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import getpass
import hashlib
import sys
import unicodedata

PROGRAM = "Hashpass v1.2.0"
DESCRIPTION = (
"""%s

Generate passwords on-the-fly using a master password and identifiers.
"""
) % (PROGRAM)
EXAMPLES = (
"""
Examples:

	Password for example.com:
		hashpass example.com

	My password for example.com's separate bug tracker:
		hashpass example.com bugs

	Very long admin password for a database:
		hashpass --length 50 database admin

	Password using only letters and numbers for a legacy system:
		hashpass legacy system --type alphanumeric

	Pin number for voice mail which only allows several digits:
		hashpass voicemail --type numeric --length 6

	Print out the master password hash:
		hashpass --print-master-password-hash

	Password for example.com, using the master password hash for 'password':
		hashpass example.com --master-password-hash VNcvd6qzEJUgV7c9ZvpKGLD4JBYopsjo5JNrO2vg3tg6VMTi4N78tKfzMRTy4sqzyc0Yad3qYk4tlSqJowaYHV

"""
)

def get_arguments():
	"""
	Parse command line arguments.
	"""
	parser = argparse.ArgumentParser(
		description = DESCRIPTION,
		epilog = EXAMPLES,
		formatter_class=argparse.RawDescriptionHelpFormatter,
		add_help=False,
	)

	operations_group = parser.add_argument_group(title="Mode")
	operations = operations_group.add_mutually_exclusive_group(required=False)
	operations.add_argument("--print-password", action="store_true", help="print password based on master password and identifiers (default)")
	operations.add_argument("--print-master-password-hash", action="store_true", help="prompt for the master password and print its hash")
	operations.add_argument("--version", action="version", version=PROGRAM),
	operations.add_argument("-h", "--help", action="help", help="print this help message")

	parameters = parser.add_argument_group(title="Parameters")
	parameters.add_argument("-l", "--length", type=int, default=15, help="maximum length of generated password (default: %(default)s)")
	parameters.add_argument("-t", "--type", choices=["normal", "alphanumeric", "numeric"], default="normal", help="type of password to generate (default: %(default)s)")
	parameters.add_argument("--master-password-hash", metavar="HASH", help="provide the hash to verify the master password against instead of prompting for the password twice")
	parameters.add_argument("identifiers", nargs="*", help="indicate which password to generate")
	args = parser.parse_args()
	if args.length <= 0:
		parser.error("argument -l/--length: LENGTH must be greater than 0")
		sys.exit(1)
	if not args.print_master_password_hash and len(args.identifiers) < 1:
		parser.error("no identifiers provided")
		sys.exit(1)
	return args

def get_master_password(expected_master_password_hash=None):
	"""
	Get the master password from the user with the given prompt.

	To verify the user has typed the password correctly, we either check what
	they typed against a known master password hash, or we ask ask them to type
	it again.

	Either way, we return the master password & the corresponding hash.
	"""
	def get(prompt):
		return getpass.getpass(prompt + ": ")
	master_password = get("Master password")
	if master_password == "":
		print("No password given, aborting!", file=sys.stderr)
		sys.exit(1)
	input_master_password_hash = generate_master_password_hash(master_password)
	if expected_master_password_hash:
		verify_password = master_password
	else:
		verify_password = get("Verify password")
		expected_master_password_hash = generate_master_password_hash(verify_password)
	if (master_password != verify_password) or (input_master_password_hash != expected_master_password_hash):
		print("Password mismatch, aborting!", file=sys.stderr)
		sys.exit(1)
	return master_password, input_master_password_hash

def generate_hash(text):
	"""
	Generate a secure hash using the given text.
	"""
	return hashlib.sha512(text.encode("UTF-8")).digest()

def normalize_text(text):
	"""
	Normalize the given text.
	"""
	return unicodedata.normalize("NFD", text)

def generate_master_password_hash(master_password):
	return encode_base62(generate_hash(normalize_text(master_password)))

def generate_plaintext(master_password, identifiers):
	"""
	Generate the plaintext message using the given password and identifiers.
	"""
	return normalize_text(
		master_password + "\x00" +
		"\x00".join(identifiers)
	)

def encode_base10(data):
	"""
	Convert the given data to base10.
	"""
	value = int.from_bytes(data, "little")
	encoded = ""
	while value > 0:
		encoded += chr(0x30 + value % 10)
		value   = value // 10
	return encoded

def encode_base62(data):
	"""
	Convert the given data to base62.
	"""
	value = int.from_bytes(data, "little")
	encoded = ""
	while value > 0:
		digit = value % 62;
		if   (digit <=  9): encoded += chr(0x30 + digit)
		elif (digit <= 35): encoded += chr(0x41 + digit - 10)
		else:               encoded += chr(0x61 + digit - 36)
		value = value // 62
	return encoded

def encode_base94(data):
	"""
	Convert the given data to base94.
	"""
	value = int.from_bytes(data, "little")
	encoded = ""
	while value > 0:
		encoded += chr(0x21 + value % 94)
		value   = value // 94
	return encoded

def generate_password(master_password, identifiers, length, type):
	plaintext = generate_plaintext(master_password, identifiers)
	hash = generate_hash(plaintext)
	if   type ==      "numeric": password = encode_base10(hash)
	elif type == "alphanumeric": password = encode_base62(hash)
	else:                        password = encode_base94(hash)
	return password[:length]

def main():
	args = get_arguments()
	master_password, master_password_hash = get_master_password(args.master_password_hash)
	if args.print_master_password_hash:
		print(master_password_hash)
		sys.exit(0)
	else:
		password = generate_password(
			master_password=master_password,
			identifiers=args.identifiers,
			length=args.length,
			type=args.type
		)
		print(password)

def self_test():

	# Core password generation tests.
	test_cases = [
		[ "Master Password", ["identifier0", "identifier1"], 1000, "normal", "sozCeWVdA*'B&*Ad<uxh\\0B[p4J+Lo!`FR,c&N1O(I;c)QehTS1wk0tFWzad[/]\>^eU<`Yj@8)>\"V" ],
		[ "Master Password", ["identifier0", "identifier1"], 1000, "alphanumeric", "gIFVmWFBnMPPd1um2hz0uCTiijJWunUlEtQCx6cIW6JLO74PjBHkbhdH4sdr528443VAYhdEMX8nR9iA3USb2K" ],
		[ "Master Password", ["identifier0", "identifier1"], 1000, "numeric", "8189979382856339561014163655613807968091303399689214759057046462588582700447356232256600409150775706828361127768805199083900979493467068268717276132001254" ],
		[ "Xyz\\ &*qwer", ["ab", "cd", "e", "--"], 1000, "normal", "@EVf;oYw~D+1FtO/jYhWT!%Y*'O~+end33XCB}Y!OC'.\"~&X{s62CbLs?9uYXHnaxgY(.W1a$j0rv;" ],
		[ "password", ["example.com"], 1000, "normal", ";$C3x0VK#E`g;&_itmf||sbX;Rk8V}\\k>Fil4~PmEL4F{S0ADctEfY1C9YUuLcXIu^:L[OY[T;@INE" ],
		[ "password", ["example.com"], 15, "normal", ";$C3x0VK#E`g;&_"],
		[ "password", ["example.com"], 14, "normal", ";$C3x0VK#E`g;&"],
		[ "password", ["example.com"], 13, "normal", ";$C3x0VK#E`g;"],
		[ "password", ["example.com"], 8, "normal", ";$C3x0VK"],
		[ "password", ["example.com"], 3, "normal", ";$C"],
		[ "password", ["example.com"], 1, "normal", ";"],
		[ "password", ["example.com"], 1000, "numeric", "8204887089211007539884582289452238817870077225951396591613328427951849602650362919004561986192708112484466838934608966834974877506177442656500515417721113" ],
		[ "password", ["example.com"], 15, "numeric", "820488708921100" ],
		[ "password", ["example.com"], 14, "numeric", "82048870892110" ],
		[ "password", ["example.com"], 13, "numeric", "8204887089211" ],
		[ "password", ["example.com"], 8, "numeric", "82048870" ],
		[ "password", ["example.com"], 3, "numeric", "820" ],
		[ "password", ["example.com"], 1, "numeric", "8" ],
		[ "password", ["example.com"], 1000, "alphanumeric", "kHqOsyblj8pg9vn55IUwuiKTrPWsnvDPbjnjq4ZxiyA5zLpcdqlyS6FsB55ZLu6ENb8FosuqxsT7otLyApc8nD" ],
		[ "password", ["example.com"], 15, "alphanumeric", "kHqOsyblj8pg9vn" ],
		[ "password", ["example.com"], 14, "alphanumeric", "kHqOsyblj8pg9v" ],
		[ "password", ["example.com"], 13, "alphanumeric", "kHqOsyblj8pg9" ],
		[ "password", ["example.com"], 8, "alphanumeric", "kHqOsybl" ],
		[ "password", ["example.com"], 3, "alphanumeric", "kHq" ],
		[ "password", ["example.com"], 1, "alphanumeric", "k" ],
		[ "é", ["ü"], 15, "normal", "1jES-Zu9utpZhAC" ], # precomposed precomposed
		[ "é", ["ü"], 15, "normal", "1jES-Zu9utpZhAC" ], #  decomposed precomposed
		[ "é", ["ü"], 15, "normal", "1jES-Zu9utpZhAC" ], # precomposed  decomposed
		[ "é", ["ü"], 15, "normal", "1jES-Zu9utpZhAC" ], #  decomposed  decomposed
	]
	for master_password, identifiers, length, type, expected_password in test_cases:
		actual_password = generate_password(
			master_password=master_password,
			identifiers=identifiers,
			length=length,
			type=type
		)
		if actual_password != expected_password:
			print("ARGH! Self test failed! Something is wrong! Do not use!", file=sys.stderr)
			sys.exit(1)

	# Master password has test cases.
	test_cases = [
		["Master Password", "DGVurdjHRMBL7woU6ILWRRdMaD1x21ojwsJMaEbzjAKizf7L59wEG2rDdsgHfq39nGDu8bEfaR2GtT26SGDReQ"],
		["Xyz\\ &*qwer", "dFsWxAhzRV2EznILLmupsn0W98wkSGPyQ0JJ4uHWMHqKAw9L3bzZFyfy6iiiaxFzjL5NLLeF4kUr8EOvTbfeX5"],
		["password", "VNcvd6qzEJUgV7c9ZvpKGLD4JBYopsjo5JNrO2vg3tg6VMTi4N78tKfzMRTy4sqzyc0Yad3qYk4tlSqJowaYHV"],
		[ "éü", "uMNyJLWIi6Pw5dOKkELNeeJPvhpBEzIUzuRGEyEsSgi2MhO6bCypjTdHuNWKAAxCbEwZT1omNyV14cHXN6lpnB" ], # precomposed precomposed
		[ "éü", "uMNyJLWIi6Pw5dOKkELNeeJPvhpBEzIUzuRGEyEsSgi2MhO6bCypjTdHuNWKAAxCbEwZT1omNyV14cHXN6lpnB" ], #  decomposed precomposed
		[ "éü", "uMNyJLWIi6Pw5dOKkELNeeJPvhpBEzIUzuRGEyEsSgi2MhO6bCypjTdHuNWKAAxCbEwZT1omNyV14cHXN6lpnB" ], # precomposed  decomposed
		[ "éü", "uMNyJLWIi6Pw5dOKkELNeeJPvhpBEzIUzuRGEyEsSgi2MhO6bCypjTdHuNWKAAxCbEwZT1omNyV14cHXN6lpnB" ], #  decomposed  decomposed
	]
	for master_password, expected_master_password_hash in test_cases:
		actual_master_password_hash = generate_master_password_hash(master_password)
		if actual_master_password_hash != expected_master_password_hash:
			print("ARGH! Self test failed! Something is wrong! Do not use!", file=sys.stderr)
			sys.exit(1)

self_test()
main()
